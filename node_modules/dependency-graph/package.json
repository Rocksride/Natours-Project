{
  "_args": [
    [
      {
        "raw": "dependency-graph@^0.7.0",
        "scope": null,
        "escapedName": "dependency-graph",
        "name": "dependency-graph",
        "rawSpec": "^0.7.0",
        "spec": ">=0.7.0 <0.8.0",
        "type": "range"
      },
      "/home/rocksride/Work/JS/2018/CSS/projects/1. starter/node_modules/postcss-cli"
    ]
  ],
  "_from": "dependency-graph@>=0.7.0 <0.8.0",
  "_id": "dependency-graph@0.7.1",
  "_inCache": true,
  "_location": "/dependency-graph",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dependency-graph_0.7.1_1528245159676_0.4688690958902446"
  },
  "_npmUser": {
    "name": "jriecken",
    "email": "jriecken@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dependency-graph@^0.7.0",
    "scope": null,
    "escapedName": "dependency-graph",
    "name": "dependency-graph",
    "rawSpec": "^0.7.0",
    "spec": ">=0.7.0 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-cli"
  ],
  "_resolved": "https://registry.npmjs.org/dependency-graph/-/dependency-graph-0.7.1.tgz",
  "_shasum": "0da960213843d8961d444da58da438bad39343a7",
  "_shrinkwrap": null,
  "_spec": "dependency-graph@^0.7.0",
  "_where": "/home/rocksride/Work/JS/2018/CSS/projects/1. starter/node_modules/postcss-cli",
  "author": {
    "name": "Jim Riecken",
    "email": "jriecken@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/jriecken/dependency-graph/issues"
  },
  "dependencies": {},
  "description": "Simple dependency graph.",
  "devDependencies": {
    "jasmine-node": "1.14.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2s2uojwu7aq0K94DwrnJwo/mTkGiPqy2cU7z5BVXmhb564WgITZR3ruZMUIJ8Ymb5ruew244odZCR23/lZoxXg==",
    "shasum": "0da960213843d8961d444da58da438bad39343a7",
    "tarball": "https://registry.npmjs.org/dependency-graph/-/dependency-graph-0.7.1.tgz",
    "fileCount": 7,
    "unpackedSize": 28267,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbFyupCRA9TVsSAnZWagAAjYEQAIrJjsUQwtKU6pWOho8N\nPkENuD5Ojv3g0iDvobsRCnyck+n1tgq1bGuOu96QcAoETLsLXqUpHOPsWw9C\n5UQttRE4E4VIppzaYwoOE++DsoT4HVNvj9UAFmfLHgjRH1M1ghTRHqn9JSEt\nALe1JZuiA1QoDXgE9xAxFTyE/mWM4IwAuCkN17HOvVeWyr0CcLHYQW/4YLSB\nfN+I/n14QipPo/Q6oIJT2P/XnR+ni7Hi5H8gD3S33PQsoNuGSo+WXWt9AKqp\nLIWoQ/9xN4hGCjGGZMKAJbCV+/l+zuj25qhPMfnOhZGQLGVrCUQzFEH9VahR\n7oYQyqQthmmZGeIOhWc74uPet6r+q1pwLCO34G2zpaiZyYhd8nF0vdQZZ4R1\n1XtkpaAKnbR/o1h5bz+IVuwukbYIgBuwAsk//G429CJyq8Xz1lndF7QY6Dp5\nH/BonwH6U/tZg6ozEOBOWLZZLlYARHbsXa1ZaC+0gfZZynkpIkaaSpZ+/9/0\nvAvTWcV4EZjCveK3K5f5E4hFRURvR39MVNGwYePMzHAegFxSP+fI+MgE9II0\nqGd2YX8HxpzBDCJAkkzPNJPHdFhn26B8CoprFjKrnanddzoVBN0OO+7STp25\nwkbhZZrsMaUMMZKn7xNr6JeUTsBPiRFjUMIHlkEIn9DcqrOwMVjflJ3kVHSA\nfZp5\r\n=mXaq\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "gitHead": "c3ce05c176c97f7b06e7744c973bf75d0d8e20f2",
  "homepage": "https://github.com/jriecken/dependency-graph#readme",
  "keywords": [
    "dependency",
    "graph"
  ],
  "license": {
    "type": "MIT",
    "url": "http://github.com/jriecken/dependency-graph/raw/master/LICENSE"
  },
  "main": "./lib/dep_graph.js",
  "maintainers": [
    {
      "name": "jriecken",
      "email": "jriecken@gmail.com"
    }
  ],
  "name": "dependency-graph",
  "optionalDependencies": {},
  "readme": "# Dependency Graph\n\nSimple dependency graph\n\n## Overview\n\nThis is a simple dependency graph useful for determining the order to do a list of things that depend on certain items being done before they are.\n\nTo use, `npm install dependency-graph` and then `require('dependency-graph').DepGraph`\n\n## API\n\n### DepGraph\n\nNodes in the graph are just simple strings with optional data associated with them.\n\n - `addNode(name, data)` - add a node in the graph with optional data. If `data` is not given, `name` will be used as data\n - `removeNode(name)` - remove a node from the graph\n - `hasNode(name)` - check if a node exists in the graph\n - `size()` - return the number of nodes in the graph\n - `getNodeData(name)` - get the data associated with a node (will throw an Error if the node does not exist)\n - `setNodeData(name, data)` - set the data for an existing node (will throw an Error if the node does not exist)\n - `addDependency(from, to)` - add a dependency between two nodes (will throw an Error if one of the nodes does not exist)\n - `removeDependency(from, to)` - remove a dependency between two nodes\n - `clone()` - return a clone of the graph. Any data attached to the nodes will only be *shallow-copied*\n - `dependenciesOf(name, leavesOnly)` - get an array containing the nodes that the specified node depends on (transitively). If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned in the array.\n - `dependantsOf(name, leavesOnly)` - get an array containing the nodes that depend on the specified node (transitively). If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n - `overallOrder(leavesOnly)` - construct the overall processing order for the dependency graph. If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n\nDependency Cycles are detected when running `dependenciesOf`, `dependantsOf`, and `overallOrder` and if one is found, an error will be thrown that includes what the cycle was in the message: e.g. `Dependency Cycle Found: a -> b -> c -> a`. If you wish to silence this error, pass `circular: true` when instantiating `DepGraph` (more below).\n\n## Examples\n\n    var DepGraph = require('dependency-graph').DepGraph;\n\n    var graph = new DepGraph();\n    graph.addNode('a');\n    graph.addNode('b');\n    graph.addNode('c');\n\n    graph.size() // 3\n\n    graph.addDependency('a', 'b');\n    graph.addDependency('b', 'c');\n\n    graph.dependenciesOf('a'); // ['c', 'b']\n    graph.dependenciesOf('b'); // ['c']\n    graph.dependantsOf('c'); // ['a', 'b']\n\n    graph.overallOrder(); // ['c', 'b', 'a']\n    graph.overallOrder(true); // ['c']\n\n    graph.addNode('d', 'data');\n\n    graph.getNodeData('d'); // 'data'\n\n    graph.setNodeData('d', 'newData');\n\n    graph.getNodeData('d'); // 'newData'\n\n    var circularGraph = new DepGraph({ circular: true });\n\n    circularGraph.addNode('a');\n    circularGraph.addNode('b');\n    circularGraph.addNode('c');\n    circularGraph.addNode('d');\n\n    circularGraph.addDependency('a', 'b');\n    circularGraph.addDependency('b', 'c'); // b depends on c\n    circularGraph.addDependency('c', 'a'); // c depends on a, which depends on b\n    circularGraph.addDependency('d', 'a');\n\n    circularGraph.dependenciesOf('b'); // ['a', 'c']\n    circularGraph.overallOrder(); // ['c', 'b', 'a', 'd']\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jriecken/dependency-graph.git"
  },
  "scripts": {
    "test": "jasmine-node specs"
  },
  "types": "./lib/index.d.ts",
  "version": "0.7.1"
}
